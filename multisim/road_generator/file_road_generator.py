# roads are provided via file

# This code is used in the paper
# "Model-based exploration of the frontier of behaviours for deep learning system testing"
# by V. Riccio and P. Tonella
# https://doi.org/10.1145/3368089.3409730
import copy
import json
from random import randint
import time
from typing import List, Tuple, Union
from shapely.geometry import Point

from road_generator.roads.simulator_road import SimulatorRoad

import math
import numpy as np

from road_generator.road_generator import RoadGenerator
from road_generator.roads.road import Road
from road_generator.roads.road_polygon import RoadPolygon
from road_generator.roads.bbox import RoadBoundingBox
from road_generator.roads.catmull_rom import catmull_rom

from shapely.errors import ShapelyDeprecationWarning
import warnings

from config import ROAD_WIDTH
warnings.simplefilter("ignore", ShapelyDeprecationWarning)

from self_driving import road_utils
import config

from self_driving.utils.visualization import RoadTestVisualizer

ex_roads = [
        [(125.0, 25.0), (124.9681707918921, 26.34065717648201), (124.87975632492568, 27.725523602382307), (124.74536633513677, 29.146310043434994), (124.57561055856132, 30.5947272653741), (124.38109873123523, 32.06248603393374), (124.17244058919455, 33.54129711484793), (123.9602458684752, 35.02287127385077), (123.75512430511316, 36.498919276676325), (123.56768563514443, 37.96115188905867), (123.40853959460492, 39.40127987673185), (123.28829591953061, 40.811014005429946), (123.21756434595748, 42.182065040887046), (123.20695460992152, 43.506143748837175), (123.26707644745866, 44.774960895014445), (123.40853959460489, 45.9802272451529), (123.64195378739618, 47.113653564986606), (123.97792876186847, 48.16695062024966), (124.42707425405777, 49.131829176676106), (125.0, 50.0), (125.74017374607834, 50.741388473779196), (126.66882923751103, 51.34242750731823), (127.76322520858695, 51.81958915497139), (129.00062039359477, 52.18934547109288), (130.35827352682333, 52.468168510036925), (131.8134433425613, 52.67253032615776), (133.3433885750975, 52.81890297380963), (134.9253679587206, 52.92375850734673), (136.53664022771952, 53.003568981123344), (138.15446411638285, 53.07480644949366), (139.75609835899942, 53.15394296681191), (141.31880168985802, 53.257450587432345), (142.8198328432474, 53.40180136570919), (144.23645055345625, 53.60346735599667), (145.5459135547734, 53.87892061264902), (146.72548058148757, 54.24463319002045), (147.75241036788756, 54.71707714246524), (148.6039616482621, 55.312724524337575), (149.25739315689992, 56.048047389991694), (149.75753158491185, 56.94393204391023), (150.16619474770854, 57.997100954789474), (150.48612806602836, 59.18778042330414), (150.7200769606099, 60.49619675012895), (150.87078685219154, 61.90257623593861), (150.94100316151184, 63.3871451814079), (150.93347130930923, 64.93012988721149), (150.85093671632222, 66.51175665402414), (150.69614480328926, 68.11225178252053), (150.47184099094883, 69.71184157337544), (150.1807707000394, 71.29075232726353), (149.82567935129953, 72.82921034485958), (149.4093123654676, 74.30744192683827), (148.93441516328215, 75.70567337387438), (148.40373316548158, 77.00413098664258), (147.82001179280442, 78.1830410658176), (147.1859964659892, 79.2226299120742), (146.50443260577433, 80.10312382608709), (145.7780656328983, 80.80474910853096), (144.9491983801389, 81.36795374259214), (143.96970144100362, 81.84763276624545), (142.85667187732548, 82.24568306234849), (141.62720675093752, 82.56400151375881), (140.29840312367287, 82.80448500333395), (138.8873580573644, 82.9690304139315), (137.4111686138452, 83.05953462840903), (135.8869318549484, 83.07789452962405), (134.33174484250688, 83.02600700043416), (132.76270463835374, 82.90576892369691), (131.196908304322, 82.71907718226981), (129.6514529022447, 82.46782865901052), (128.14343549395488, 82.15392023677654), (126.68995314128557, 81.77924879842544), (125.30810290606979, 81.3457112268148), (124.01498185014059, 80.85520440480215), (122.827687035331, 80.30962521524506), (121.76331552347402, 79.71087054100114), (120.83896437640269, 79.06083726492783), (120.05187940584804, 78.31743439040996), (119.37965528098391, 77.44567631817469), (118.80991234980762, 76.4581180270936), (118.33027096031647, 75.36731449603805), (117.92835146050776, 74.18582070387949), (117.59177419837883, 72.92619162948938), (117.30815952192691, 71.60098225173914), (117.0651277791494, 70.22274754950024), (116.85029931804354, 68.80404250164409), (116.65129448660667, 67.35742208704215), (116.45573363283606, 65.89544128456586), (116.25123710472904, 64.43065507308664), (116.02542525028294, 62.97561843147599), (115.76591841749504, 61.5428863386053), (115.46033695436265, 60.14501377334601), (115.09630120888306, 58.7945557145696), (114.6614315290536, 57.504067141147495), (114.14334826287158, 56.286103031951136), (113.52967175833427, 55.15321836585194), (112.83528177279531, 54.084701139626), (112.0864236310143, 53.04956204247367), (111.28776603209778, 52.04494009190296), (110.44397767515213, 51.067974305421814), (109.55972725928387, 50.11580370053824), (108.63968348359943, 49.185567294760176), (107.68851504720527, 48.27440410559563), (106.71089064920787, 47.379453150552564), (105.71147898871365, 46.49785344713894), (104.69494876482909, 45.626744012862744), (103.66596867666061, 44.76326386523195), (102.62920742331474, 43.90455202175453), (101.58933370389789, 43.04774749993848), (100.55101621751652, 42.18998931729173), (99.51892366327709, 41.32841649132229), (98.49772474028607, 40.460168039538125), (97.49208814764992, 39.58238297944721), (96.50668258447509, 38.69220032855752), (95.546176749868, 37.78675910437701)],
        [(125.0, 25.0), (125.0315328592486, 26.339551187482318), (125.11912413493911, 27.721345421716798), (125.25226287398876, 29.13746213143744), (125.42043812331463, 30.579980745378183), (125.61313892983381, 32.040980692273024), (125.81985434046351, 33.512541400855895), (126.03007340212082, 34.98674229986078), (126.23328516172288, 36.455662818021636), (126.41897866618683, 37.911382384072446), (126.57664296242983, 39.34598042674716), (126.69576709736894, 40.75153637477975), (126.76584011792139, 42.12012965690419), (126.77635107100426, 43.44383970185442), (126.71678900353467, 44.714745938364445), (126.57664296242982, 45.924927795168216), (126.34540199460676, 47.066464700999674), (126.01255514698269, 48.13143608459282), (125.56759146647474, 49.111921374681614), (125.0, 50.0), (124.30186539977879, 50.81118924608487), (123.47948871008057, 51.566945456520905), (122.54368356589646, 52.2682566471139), (121.50526360221745, 52.91611083366953), (120.37504245403451, 53.511496031993566), (119.16383375633879, 54.05540025789175), (117.8824511441212, 54.5488115271698), (116.54170825237284, 54.99271785563346), (115.1524187160847, 55.38810725908848), (113.72539617024779, 55.73596775334057), (112.2714542498532, 56.03728735419548), (110.8014065898919, 56.29305407745896), (109.32606682535499, 56.50425593893675), (107.85624859123337, 56.67188095443456), (106.40276552251821, 56.79691713975814), (104.97643125420046, 56.880352510713244), (103.58805942127117, 56.923175083105605), (102.24846365872135, 56.926372872740934), (100.96845760154203, 56.89093389542498), (99.72391798255111, 56.7707798527329), (98.48326610061753, 56.52890108641631), (97.246132439809, 56.17988857254574), (96.0121474841932, 55.738333287191644), (94.78094171783786, 55.21882620642453), (93.55214562481062, 54.6359583063149), (92.32538968917916, 54.004320562933216), (91.10030439501122, 53.338503952349996), (89.87652022637442, 52.65309945063569), (88.65366766733649, 51.96269803386084), (87.43137720196509, 51.28189067809589), (86.20927931432793, 50.625268359411365), (84.98700448849269, 50.00742205387776), (83.76418320852707, 49.44294273756552), (82.54044595849871, 48.946421386545175), (81.31542322247535, 48.53244897688721), (80.08874548452465, 48.215616484662114), (78.86004322871432, 48.010514885940374), (77.62894693911198, 47.93173515679247), (76.39785210440124, 47.975428690451736), (75.16905982725564, 48.12130911742346), (73.9420590127281, 48.3593107696862), (72.7163385658714, 48.67936797921845), (71.49138739173846, 49.07141507799873), (70.26669439538207, 49.52538639800554), (69.04174848185514, 50.03121627121742), (67.81603855621046, 50.578839029612865), (66.58905352350091, 51.15818900517043), (65.36028228877933, 51.759200529868565), (64.12921375709858, 52.37180793568582), (62.89533683351151, 52.98594555460073), (61.658140423070954, 53.59154771859179), (60.41711343082978, 54.1785487596375), (59.17174476184083, 54.736883009716415), (57.921523321156954, 55.25648480080702), (56.66593801383102, 55.72728846488785), (55.40447774491583, 56.139228333937396), (54.13663141946427, 56.48223873993419), (52.840518200267674, 56.80740757006288), (51.49972540054551, 57.16639952830728), (50.12194415099292, 57.550014171844865), (48.71486558230502, 57.94905105785296), (47.286180825176935, 58.354309743508985), (45.84358101030378, 58.75658978599033), (44.39475726838068, 59.14669074247436), (42.94740073010276, 59.51541217013848), (41.50920252616511, 59.85355362616009), (40.08785378726288, 60.15191466771657), (38.69104564409119, 60.401294851985284), (37.32646922734513, 60.59249373614364), (36.001815667719875, 60.71631087736904), (34.7247760959105, 60.76354583283885), (33.50304164261213, 60.724998159730475), (32.34430343851991, 60.5914674152213), (31.25625261432893, 60.353753156488736), (30.24658030073433, 60.00265494071014), (29.32297762843122, 59.52897232506288), (28.488298546248984, 58.91954105114745), (27.73564737800883, 58.17502647985018), (27.058090816893667, 57.306972597277465), (26.44869555608638, 56.32692338953559), (25.90052828876986, 55.246422842730894), (25.406655708127, 54.07701494296974), (24.960144507340697, 52.83024367635841), (24.554061379593843, 51.51765302900328), (24.181473018069333, 50.15078698701066), (23.835446115950056, 48.74118953648686), (23.509047366418905, 47.300404663538245), (23.195343462658773, 45.839976354271116), (22.887401097852564, 44.37144859479184), (22.578286965183153, 42.90636537120672), (22.26106775783345, 41.45627066962209), (21.928810168986345, 40.0327084761443), (21.574580891824723, 38.647222776879666), (21.19144661953148, 37.311357557934514), (20.77247404528951, 36.03665680541517)],
         [(125.0, 25.0), (125.01689511107375, 26.320474902659583), (125.06382597516742, 27.649279456830904), (125.13516088858988, 28.98485185285555), (125.22526814764984, 30.32563028107503), (125.32851604865598, 31.670052931830924), (125.43927288791716, 33.01655799546474), (125.55190696174208, 34.36358366231804), (125.66078656643948, 35.709568122732385), (125.76027999831818, 37.052949567049296), (125.84475555368687, 38.39216618561033), (125.9085815288543, 39.72565616875703), (125.94612622012926, 41.051857706830944), (125.95175792382052, 42.3692089901736), (125.91984493623679, 43.676148209126566), (125.84475555368687, 44.971113554031376), (125.72085807247944, 46.25254321522958), (125.54252078892333, 47.51887538306273), (125.30411199932729, 48.76854824787235), (125.0, 50.0), (124.64173613161446, 51.234048394764734), (124.2449793820317, 52.48873605330617), (123.81025951834297, 53.75833846469682), (123.33810630763931, 55.037131118009064), (122.82904951701181, 56.319389502315396), (122.2836189135516, 57.59938910668824), (121.70234426434982, 58.87140542020006), (121.08575533649754, 60.1297139319233), (120.4343818970859, 61.368590130930414), (119.74875371320603, 62.58230950629384), (119.02940055194897, 63.76514754708601), (118.27685218040585, 64.91137974237941), (117.49163836566787, 66.01528158124646), (116.67428887482605, 67.07112855275963), (115.8253334749715, 68.07319614599136), (114.94530193319541, 69.01575985001408), (114.03472401658883, 69.89309515390028), (113.09412949224287, 70.69947754672238), (112.12404812724864, 71.4291825175528), (111.09501854924198, 72.10650620431997), (109.98349848538713, 72.7571302087341), (108.79889635206804, 73.37740821554058), (107.5506205656685, 73.96369390948462), (106.24807954257244, 74.51234097531159), (104.9006816991637, 75.0197030977668), (103.51783545182613, 75.4821339615955), (102.10894921694366, 75.89598725154303), (100.68343141090011, 76.25761665235473), (99.25069045007933, 76.56337584877585), (97.82013475086526, 76.80961852555171), (96.4011727296417, 76.99269836742764), (95.00321280279258, 77.10896905914893), (93.63566338670171, 77.15478428546089), (92.30793289775299, 77.12649773110883), (91.02942975233032, 77.02046308083803), (89.80956236681752, 76.83303401939385), (88.6577391575985, 76.56056423152154), (87.58336854105704, 76.19940740196643), (86.57199891049979, 75.72846518190646), (85.60123941167309, 75.13564930330033), (84.66858958962071, 74.43082857206464), (83.77154898938632, 73.62387179411597), (82.9076171560136, 72.72464777537088), (82.07429363454628, 71.74302532174596), (81.26907797002804, 70.68887323915772), (80.48946970750261, 69.57206033352276), (79.73296839201365, 68.40245541075765), (78.99707356860488, 67.18992727677895), (78.27928478231999, 65.94434473750323), (77.57710157820271, 64.67557659884703), (76.88802350129673, 63.39349166672698), (76.20955009664574, 62.107958747059584), (75.53918090929344, 60.82884664576145), (74.87441548428353, 59.56602416874914), (74.21275336665974, 58.32936012193922), (73.55169410146574, 57.12872331124822), (72.88873723374522, 55.97398254259274), (72.25295768542607, 54.81767914054273), (71.66993278684478, 53.61120443941812), (71.13191569565812, 52.36270225976049), (70.6311595695228, 51.08031642211144), (70.15991756609554, 49.772190747012516), (69.71044284303306, 48.44646905500531), (69.27498855799212, 47.11129516663141), (68.84580786862941, 45.774812902432394), (68.4151539326017, 44.445166082949825), (67.97527990756565, 43.13049852872528), (67.51843895117804, 41.83895406030037), (67.03688422109559, 40.57867649821662), (66.52286887497502, 39.35780966301568), (65.96864607047303, 38.184497375239054), (65.3664689652464, 37.066883455428375), (64.70859071695183, 36.0131117241252), (63.98726448324605, 35.03132600187112), (63.19474342178578, 34.12967010920769), (62.32328069022773, 33.31628786667649), (61.37312980149207, 32.59341699819954), (60.353669375071625, 31.95314602025943), (59.270840228482264, 31.388394942238754), (58.13058317923979, 30.892083773520056), (56.93883904486008, 30.457132523485885), (55.70154864285895, 30.076461201518796), (54.42465279075224, 29.742989817001344), (53.11409230605578, 29.44963837931609), (51.775808006285416, 29.189326897845582), (50.415740708956974, 28.954975381972368), (49.039831231586305, 28.739503841079006), (47.65402039168923, 28.53583228454806), (46.26424900678161, 28.33688072176208), (44.87645789437926, 28.13556916210361), (43.49658787199803, 27.924817614955224), (42.130579757153754, 27.697546089699454), (40.78437436736229, 27.446674595718875), (39.46391252013942, 27.16512314239603), (38.17513503300103, 26.845811739113465)]
]

class FileRoadGenerator(RoadGenerator):

    def __init__(
        self,
        map_size: int,
        num_control_nodes=8,
        max_angle=90,
        seg_length=25,
        num_spline_nodes=20,
        initial_node=(0.0, 0.0, 0.0, config.ROAD_WIDTH),
        bbox_size=(0, 0, 250, 250),
        max_angles = None,
        file_path = None,
        current_index = 0
    ):
        assert num_control_nodes > 1 and num_spline_nodes > 0
        assert 0 <= max_angle <= 360
        assert seg_length > 0
        assert len(initial_node) == 4 and len(bbox_size) == 4
        self.map_size = map_size
        self.num_spline_nodes = num_spline_nodes
        self.initial_node = initial_node
        self.max_angle = max_angle
        self.seg_length = seg_length
        self.road_bbox = RoadBoundingBox(bbox_size=bbox_size)
        self.road_to_generate = None

        self.previous_road: Road = None

        if max_angles is None:
            self.max_angles = [max_angle for i in range(num_control_nodes)]
        else:
            self.max_angles = max_angles
        
        self.currend_index = current_index
        self.file_path = file_path

        if self.file_path is not None:
            if self.file_path.endswith(".txt"):
                self.roads =self.read_roads_from_file_mapelites(self.file_path)
            else:
                self.roads =self.read_roads_from_file_raw(self.file_path)
        else:
            self.roads = ex_roads
        
        self.num_control_nodes = len(self.roads[0])

    def read_roads_from_file_raw(self, file_path: str):
        f = open(file_path)
        data = json.load(f)
        roads = []
        for _, road_points in data.items():
            road = [(p[0],p[1]) for p in road_points]
            roads.append(road)
        return roads   

    def read_roads_from_file_mapelites(self, file_path: str):
        roads = []
        current_individual = None
        with open(file_path, 'r') as file:
            for line in file:
                if 'INFO:MapElites:Individual #' in line:
                    str_individual = line.split('#')[1].split(':')[1]
                    road = str_individual.strip().lstrip('[').rstrip(']\n').split('), (')
                    road = [tuple(map(float, point.strip('()').split(', '))) for point in road]
                    roads.append(road)
        return roads

    def generate(self, *args, **kwargs) -> str:
        """
        Needs a list of integer angles in the kwargs param `angles`.
        Optionally takes another list of segment lengths in `seg_lengths` key of kwargs.
        """
        roads = self.roads

        assert self.currend_index < len(roads), "Index is higher then number of existing roads"

        if self.road_to_generate is not None:
            road_to_generate = copy.deepcopy(self.road_to_generate)
            self.road_to_generate = None
            return road_to_generate
        
        id = self.currend_index

        road_points = [Point(p[0], p[1], 0) for p in roads[id]]
        control_points = [Point(p[0], p[1], 0) for p in roads[id]]
        _, _, _, width = self.initial_node

        self.previous_road = road_utils.get_road(road_width=width, 
                                                 road_points=road_points, 
                                                 control_points=control_points, 
                                                 simulator_name=kwargs["simulator_name"])
        
        self.currend_index += 1

        return self.previous_road

    def _get_initial_point(self) -> Point:
        return Point(self.initial_node[0], self.initial_node[1])

    def _get_initial_control_node(self) -> Tuple[float, float, float, float]:
        x0, y0, z, width = self.initial_node
        x, y = self._get_next_xy(x0, y0, 270, self.seg_length)

        return x, y, z, width
    
if __name__ == "__main__":

    map_size = 250

    # set_random_seed(seed=0)

    angles = [60,-10,0,90,90]
    seg_lengths = [40 for _ in angles]

    file_path = r"C:\\Users\\Lev\\Documents\\fortiss\\projects\\testing\\Multi-Simulation\\opensbt-multisim\\road_generator\\roads_matteo_maxibon.txt"

    gen = FileRoadGenerator(map_size=250,
                                        num_control_nodes=len(angles),
                                        seg_length=config.SEG_LENGTH,
                                        max_angle=config.MAX_ANGLE,
                                        file_path=file_path)

    start_time = time.perf_counter()

    road = gen.generate(simulator_name=config.UDACITY_SIM_NAME,
                        angles = angles,
                        starting_pos=(0,0,0,0),
                        seg_lengths=seg_lengths)

    concrete_representation = road.get_concrete_representation()
    print(time.perf_counter() - start_time)

    road_test_visualizer = RoadTestVisualizer(map_size=map_size)
    road_test_visualizer.visualize_road_test(road=road, folder_path="./road_generator/", filename="road_custom")
